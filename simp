@cl.on_message
async def main(message):
    chain = cl.user_session.get("chain")
    cb = cl.AsyncLangchainCallbackHandler(
        stream_final_answer=True, answer_prefix_tokens=["FINAL", "ANSWER"]
    )

    cb.answer_reached = True
    # Extract the text from the message object
    message_text = message["content"] if isinstance(message, dict) else str(message)

    # Use ainvoke for asynchronous calls
    res = await chain.ainvoke({"input": message_text}, callbacks=[cb])
    answer = res["result"]
    sources = res["source_documents"]

    if sources:
        answer += f"\nSources: " + str(sources)
    else:
        answer += f"\nNo Sources Found"

    await cl.Message(content=answer).send()
